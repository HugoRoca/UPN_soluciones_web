import { simulateUserJourney, performLogin, getAppointments, getPatients, getDoctors, accessMainPage, accessDashboard } from './common.js';

/**
 * PRUEBAS DE SPIKE
 * 
 * Este script simula picos de tr√°fico repentinos para probar c√≥mo
 * la aplicaci√≥n dental maneja cargas inesperadas.
 * 
 * Escenarios:
 * - Carga normal: 10 usuarios por 1 minuto
 * - Spike 1: 100 usuarios por 30 segundos
 * - Recuperaci√≥n: 10 usuarios por 1 minuto
 * - Spike 2: 200 usuarios por 30 segundos
 * - Recuperaci√≥n: 10 usuarios por 1 minuto
 * - Spike 3: 300 usuarios por 30 segundos
 * - Recuperaci√≥n final: 10 usuarios por 1 minuto
 */

export const options = {
    // Configuraci√≥n de etapas para spike testing
    stages: [
        // Carga normal inicial
        { duration: '1m', target: 10 },   // 10 usuarios por 1 minuto
        
        // Primer spike
        { duration: '30s', target: 100 }, // Spike a 100 usuarios en 30 segundos
        { duration: '1m', target: 10 },   // Recuperaci√≥n a 10 usuarios
        
        // Segundo spike (m√°s intenso)
        { duration: '30s', target: 200 }, // Spike a 200 usuarios en 30 segundos
        { duration: '1m', target: 10 },   // Recuperaci√≥n a 10 usuarios
        
        // Tercer spike (m√°ximo)
        { duration: '30s', target: 300 }, // Spike a 300 usuarios en 30 segundos
        { duration: '1m', target: 10 },   // Recuperaci√≥n final
    ],

    // Umbrales de rendimiento para spike testing
    thresholds: {
        // Tiempo de respuesta
        http_req_duration: [
            'p(50)<1500',   // 50% de requests < 1.5 segundos
            'p(90)<4000',   // 90% de requests < 4 segundos
            'p(95)<6000',   // 95% de requests < 6 segundos
            'p(99)<10000',  // 99% de requests < 10 segundos
        ],
        
        // Tasa de errores
        http_req_failed: ['rate<0.10'],   // < 10% de errores
        
        // Throughput
        http_reqs: ['rate>8'],            // M√≠nimo 8 requests/segundo
        
        // M√©tricas personalizadas
        errors: ['rate<0.10'],            // < 10% de errores personalizados
    },

    // Configuraci√≥n de usuarios virtuales
    vus: 0,  // Se controla por las etapas
    
    // Configuraci√≥n de m√©tricas
    ext: {
        loadimpact: {
            distribution: {
                'amazon:us:ashburn': { loadZone: 'amazon:us:ashburn', percent: 100 },
            },
        },
    },
};

/**
 * Funci√≥n principal que ejecuta cada usuario virtual
 * Versi√≥n optimizada para spike testing
 */
export default function () {
    // Para spike testing, usamos operaciones r√°pidas
    // que simulan el comportamiento real durante picos de tr√°fico
    
    // 1. Acceso r√°pido a p√°gina principal
    accessMainPage();
    sleep(0.2);
    
    // 2. Login r√°pido
    performLogin();
    sleep(0.3);
    
    // 3. Acceso al dashboard
    accessDashboard();
    sleep(0.2);
    
    // 4. Operaciones cr√≠ticas (en paralelo conceptual)
    getAppointments();
    sleep(0.1);
    
    getPatients();
    sleep(0.1);
    
    getDoctors();
    sleep(0.1);
    
    // 5. Pausa m√≠nima para simular comportamiento real
    sleep(0.5);
}

/**
 * Funci√≥n alternativa para spike extremo
 * Descomenta esta funci√≥n para pruebas de spike m√°s agresivas
 */
/*
export default function () {
    // Spike extremo - operaciones m√≠nimas
    accessMainPage();
    sleep(0.1);
    performLogin();
    sleep(0.1);
    getAppointments();
    sleep(0.1);
}
*/

/**
 * Configuraci√≥n de setup
 */
export function setup() {
    console.log('‚ö° Iniciando pruebas de spike...');
    console.log('üìä Configuraci√≥n:');
    console.log('   - Carga normal: 10 usuarios (1 min)');
    console.log('   - Spike 1: 100 usuarios (30s)');
    console.log('   - Recuperaci√≥n: 10 usuarios (1 min)');
    console.log('   - Spike 2: 200 usuarios (30s)');
    console.log('   - Recuperaci√≥n: 10 usuarios (1 min)');
    console.log('   - Spike 3: 300 usuarios (30s)');
    console.log('   - Recuperaci√≥n final: 10 usuarios (1 min)');
    console.log('   - Duraci√≥n total: 6.5 minutos');
    console.log('üéØ Objetivos:');
    console.log('   - Probar recuperaci√≥n despu√©s de picos');
    console.log('   - Identificar degradaci√≥n de rendimiento');
    console.log('   - Verificar estabilidad del sistema');
    console.log('   - < 10% de errores durante spikes');
}

/**
 * Configuraci√≥n de teardown
 */
export function teardown(data) {
    console.log('‚úÖ Pruebas de spike completadas');
    console.log('üìà M√©tricas finales:');
    console.log(`   - Requests totales: ${data.metrics.http_reqs.values.count}`);
    console.log(`   - Tiempo promedio: ${data.metrics.http_req_duration.values.avg}ms`);
    console.log(`   - Tiempo p95: ${data.metrics.http_req_duration.values['p(95)']}ms`);
    console.log(`   - Tiempo p99: ${data.metrics.http_req_duration.values['p(99)']}ms`);
    console.log(`   - Tasa de errores: ${(data.metrics.http_req_failed.values.rate * 100).toFixed(2)}%`);
    console.log(`   - Throughput: ${data.metrics.http_reqs.values.rate.toFixed(2)} req/s`);
    
    // An√°lisis espec√≠fico de spike
    const errorRate = data.metrics.http_req_failed.values.rate;
    const avgResponseTime = data.metrics.http_req_duration.values.avg;
    const p95ResponseTime = data.metrics.http_req_duration.values['p(95)'];
    
    console.log('üîç An√°lisis de Spike:');
    if (errorRate > 0.05) {
        console.log('   ‚ö†Ô∏è  Tasa de errores elevada durante spikes');
    } else {
        console.log('   ‚úÖ Buena estabilidad durante spikes');
    }
    
    if (avgResponseTime > 3000) {
        console.log('   ‚ö†Ô∏è  Tiempo de respuesta alto - posible degradaci√≥n');
    } else {
        console.log('   ‚úÖ Tiempo de respuesta aceptable');
    }
    
    if (p95ResponseTime > 8000) {
        console.log('   ‚ö†Ô∏è  P95 alto - algunos usuarios experimentan lentitud');
    } else {
        console.log('   ‚úÖ P95 dentro de rangos aceptables');
    }
    
    console.log('üí° Recomendaciones:');
    if (errorRate > 0.05 || avgResponseTime > 3000) {
        console.log('   - Considerar escalado horizontal');
        console.log('   - Optimizar consultas de base de datos');
        console.log('   - Implementar cach√© para operaciones frecuentes');
    } else {
        console.log('   - Sistema maneja bien los picos de tr√°fico');
        console.log('   - Configuraci√≥n actual es adecuada');
    }
} 